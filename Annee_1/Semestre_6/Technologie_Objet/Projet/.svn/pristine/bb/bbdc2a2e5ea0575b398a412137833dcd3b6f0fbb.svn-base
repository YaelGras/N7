package src.affichagePartie;

import src.menus.*;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.event.*;

import javax.swing.*;

import src.carte.*;
import src.Structure;
import src.batiments.*;

@SuppressWarnings("serial")
public class AffichageCarte extends JPanel implements ComponentListener, KeyListener, MouseListener {

    private JFrame fenetre;

    private ImageIcon icoHerbe;
    private Image imgHerbe;
    
    private Carte carte;
    
    private int largeur;
    private int hauteur;
    
    private int dx;
    private int dy;
    
    private int xFond = -48;
    private int yFond = -48;

    public AffichageCarte(JFrame fenetre, AffichagePartie partie, Carte carte) {
        super();
        this.fenetre = fenetre;
        
		this.carte = carte;
        this.largeur = Carte.getLargeur();
        this.hauteur = Carte.getHauteur();
        
        this.icoHerbe = new ImageIcon("src/Images/herbeBord52.png");
		this.imgHerbe = this.icoHerbe.getImage();
		
        this.fenetre.getContentPane().add(this);
		this.fenetre.addComponentListener((ComponentListener) this);
		
		this.setFocusable(true);
		this.requestFocusInWindow();
		this.addKeyListener(this);
		this.addMouseListener(this);
		
		//Thread chronoEcran = new Thread(new Chrono());
		//chronoEcran.start();
		
		this.setVisible(true);
		
		// Tests batiments
		Case case1 = new Case(3,4); 
		Case case2 = new Case(3,4);
		Parcelle[] parcellesHabitation = new Parcelle[1];
		parcellesHabitation[0] = new Parcelle(case1,case2,carte);
		Habitation habitation = new Habitation(this.carte, case1, parcellesHabitation, 1);
		try {
			this.carte.construire(habitation);
		} catch(CaseOccupeeException e) {
            System.out.println("Erreur: caseOccupeeException" + e.getMessage());
		}
		
		Case case3 = new Case(5,5); 
		Case case4 = new Case(5,5);
		Parcelle[] parcellesHopital = new Parcelle[1];
		parcellesHopital[0] = new Parcelle(case3,case4,carte);
		int[] acces = new int[0];
		Hopital hopital = new Hopital(case3, this.carte, parcellesHopital, acces, 1, 1, 1);
		try {
			this.carte.construire(hopital);
		} catch(CaseOccupeeException e) {
            System.out.println("Erreur: caseOccupeeException " + e.getMessage());
		}
		
    }
    
    public void arreterClavier() {
    	this.setFocusable(false);
    }
    
    public void relancerClavier() {
        this.setFocusable(true);
		this.requestFocusInWindow();

    }

    public void pause() {
        this.setVisible(false);
    }
    
    public void setDx(int dx) {
		this.dx = dx;
	}
	
	public void setDy(int dy) {
		this.dy = dy;
	}
	
	public int getDx() {
		return this.dx;
	}
	
	public int getDy() {
		return this.dy;
	}
	
	public void deplacementFond() {
		this.xFond += this.dx;
		this.yFond += this.dy;
	}
 
    public void paintComponent(Graphics g) {
		
		try {
        	super.paintComponent(g);
        	
        	this.deplacementFond();
    		for (int i = 1; i <= this.largeur; i++) {
    			for (int j = 1; j <= this.hauteur; j++) {
    				g.drawImage(this.imgHerbe, this.xFond + i*Structure.longueurCase, this.yFond + j*Structure.longueurCase, null);
    			}
    		}
    		
        	this.carte.afficher(g, xFond, yFond);
        	
        	//g.drawImage(this.imgHerbe, 0, 0, null);
        	
        } catch (Exception e) {
            System.out.println("Erreur affichageCarte (paintComponent): " + e.getMessage());
        }
	}

    void updatePosition() {
    }

    @Override
	public void componentResized(ComponentEvent e){
    }
	
	@Override
	public void componentHidden(ComponentEvent arg0) {
	}

	@Override
	public void componentMoved(ComponentEvent arg0) {
	}

	@Override
	public void componentShown(ComponentEvent arg0) {
	}
	

	// Gestion du clavier
	public final static int deplacementElementaire = 26;
	
	@Override
	public void keyPressed(KeyEvent e) {
		

		if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			if (this.xFond > -52*Carte.getLargeur() + fenetre.getWidth() - 100) {
				this.setDx(-deplacementElementaire);
			}
		} else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			if (this.xFond < -52) {
				this.setDx(deplacementElementaire);
			}
		} else if (e.getKeyCode() == KeyEvent.VK_UP) {
			if (this.yFond < -52) {
				this.setDy(deplacementElementaire);
			}
		} else if (e.getKeyCode() == KeyEvent.VK_DOWN) {
			if (this.yFond > -52*Carte.getHauteur() + fenetre.getHeight() - 300) {
				this.setDy(-deplacementElementaire);
			}
		}

		this.repaint();
		
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		this.setDx(0);
		this.setDy(0);
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		double mouseX = e.getPoint().getX();
        double mouseY = e.getPoint().getY();
		System.out.println("1"+ mouseX);
		System.out.println(mouseY);
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {

	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		
	}

	
}
