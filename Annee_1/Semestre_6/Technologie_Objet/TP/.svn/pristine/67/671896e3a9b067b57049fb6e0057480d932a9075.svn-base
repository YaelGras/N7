package allumettes;

public class Arbitre {
	private Joueur joueur1;
	private Joueur joueur2;
	private Boolean confiant;

	
	Arbitre(Joueur j1, Joueur j2){
		this.joueur1 = j1;
		this.joueur2 = j2;
		this.confiant = false;
	}
	
	void setConfiant(boolean confiant) {
		this.confiant = confiant;
	}
	
	public void arbitrer(Jeu jeu){
		boolean finPartie;
		Joueur joueur = this.joueur1;
		do {
			
			finPartie = tourJoueur(joueur, jeu);
			joueur = changeJoueur(joueur);
			
		} while (!finPartie);
		
	}
	
	private boolean tourJoueur(Joueur joueur, Jeu jeu) {
		
		Boolean finPartie;
		
		if(this.confiant) {
			finPartie = priseJoueur(joueur, jeu, jeu);
		} else {
			finPartie = priseJoueur(joueur, jeu, new Procuration(jeu));
		}		
		
		if(jeu.getNombreAllumettes() == 0) {
			afficherResultat(joueur);
			finPartie = true;
		}
		return finPartie; // finTour(joueur, jeu, triche, nombreAllumettes);		
	}
	
	
	private boolean priseJoueur(Joueur joueur, Jeu jeu, Jeu procuration) {
		
		System.out.println("Allumettes restantes : " + jeu.getNombreAllumettes());
		boolean suite = true;
		int prise = 0;
		try {
			do {			
				try {
					prise = joueur.getPrise(procuration);
					jeu.retirer(prise);
					afficherprise(joueur, prise);
				} catch (CoupInvalideException e) {
					System.out.print("Impossible ! Nombre invalide : " + e.getCoup());
					System.out.println(" " + e.getMessage());
					suite = false;
				}
			} while (!suite);
		
		} catch (OperationInterditeException e) {
			System.out.println("Abandon de la partie car " + joueur.getNom() + " triche !");
			return true;
		}	
		return false;
	}	
	
	
	private void afficherprise(Joueur joueur, int prise) {
		System.out.print(joueur.getNom() + " prend " + prise + " allumette");
		if(prise <= 1) {
			System.out.println(".");
		} else {
			System.out.println("s.");
		}
		System.out.println("");
	}

	private void afficherResultat (Joueur joueur) {						
				
		System.out.println(joueur.getNom() + " perd !");
		
		if(joueur.getNom() == this.joueur1.getNom()) {
			System.out.println(this.joueur2.getNom() + " gagne !");
		} else {
			System.out.println(this.joueur1.getNom() + " gagne !");
		}
		
	}
	
	private Joueur changeJoueur(Joueur joueur) {
		return (this.joueur1.getNom() == joueur.getNom()) ? 
				this.joueur2 : this.joueur1;
	}
}
