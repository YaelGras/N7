with arbre_de_huffman; use arbre_de_huffman;
with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;

procedure test_arbre_huffman is

        Arbre_test    : Arbre; 
        Frequences    : T_frequences;
        Dictionnaire  : T_Dictionnaire;
        File          : Ada.Streams.Stream_IO.File_Type;
        S             : Stream_Access;
        Texte         : Unbounded_String;
        Octet         : T_Octet;        --Type présent dans le mmodule arbre_de_huffman

        procedure test_la_donnee_dict(Dict : in T_Dictionnaire) is
        begin
                pragma Assert (La_Donnee_Dict());
                pragma Assert (La_Donnee_Dict());
                pragma Assert (La_Donnee_Dict());
                begin 
                        pragma Assert (La_Donnee_Dict() = To_Unbouded_String("0"));
                exception
                        when Exception_Donnee_Absente =>
                                null;
                end;

        end test_la_donnee_dict;

        procedure test_le_caractère_dict() is
        begin

        end test_le_caractère_dict;

        procedure test_code_est_present_dict() is
        begin

        end test_code_est_present_dict;

        procedure test_arbre_en_binaire() is
        begin

        end test_arbre_en_binaire;

        procedure test_table_en_binaire() is 
        begin
        
        end test_table_en_binaire;

        procedure test_recup_arbre() is 
        begin

        end test_recup_arbre;



        procedure test_afficher_arbre() is
        begin

        end test_afficher_arbre;
        
        procedure test_afficher_dict() is
        begin

        end test_afficher_dict;




begin
        Open(File, In_File, "fichier_test_.txt");
        S := Stream(File);
        while not End_of_File(File) loop
                Octet := T_Octet'Input(S);
                Texte := Texte + To_Unbounded_String(Octet);
        end loop;
        Put_Line(To_String(Texte));

        Calcul_freq(Frequences, Texte);
        Construire_Arbre(Arbre_test, Frequences);
        Fabriquer_Dict(Dictionnaire, Arbre_test);




        Vider_Arbre(Arbre);             -- Sera testé avec Valgrind
        Vider_Dict(Dictionnaire);       -- Sera testé avec Valgrind
        

end arbre_de_huffman;
