with Ada.Text_IO; use Ada.Text_IO;
with arbre_de_huffman; use arbre_de_huffman;
with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with System.Assertions; use System.Assertions;
with Ada.IO_Exceptions; use Ada.IO_Exceptions;
with Ada.Command_Line; use Ada.Command_Line;

procedure Compression is




    -- Affiche l'utilisation de la commande si une erreur est manifeste
    procedure Afficher_Usage is
    begin
        New_Line;
        Put_Line("Usage : " & Command_Name & "Option Nom_Fichier");
        New_Line;
        Put_Line("Option : ");
        Put_Line("         -b ou --bavard : Affichage de l'Arbre de Huffman et de la table associée");
        New_Line;
        Put_Line("Nom_Fichier : Nom du fichier à compresser en .txt");
        New_Line;
    end Afficher_Usage;

    procedure Comprimer_Fichier(Nom_Fichier : in Unbounded_String, Option_b : in Boolean) is

        procedure Lire(Fichier_Txt : in String, Texte : out Unbounded_String) is
            File          : Ada.Streams.Stream_IO.File_Type;
            S             : Stream_Access;
        begin
            Open(File, In_File, Fichier_Txt);
            S := Stream(File);
            Texte := To_Unbounded_String("");
            begin
                while not End_of_File(File) loop
                    Texte := Texte & Character'Input(S);
                end loop;
            exception
                when Ada.IO_Exceptions.End_Error => null; --Fin du fichier
            end;

            Close(File);
        end Lire;

        procedure Ecrire_Compression(Nom_Fichier_hff : in String, Texte_hff : in Unbounded_String) is
            File_out      : Ada.Streams.Stream_IO.File_Type;
            S 		: Stream_Access;
        begin
            Create (File_out, Out_File, To_String(Nom_Fichier_Hff));
            S := Stream(File_out)
            Close(File_out);
        end Ecrire_Compression;



        Arbre_Huff    : Arbre;
        Frequences    : T_frequences;
        Dictionnaire  : T_Dictionnaire;
        Texte         : Unbounded_String;

        Texte_Hff	   : Unbounded_
        Nom_Fichier_Hff : Unbounded_String;

    begin
        -- Créer l'arbre de Huffman
        Lire(Nom_Fichier, Texte);
        Calculer_Freq(Frequences, Texte);
        Construire_Arbre(Arbre_Huff, Frequences);
        Fabriquer_Dict(Dictionnaire, Arbre_Huff);
        if Option_b then
            Afficher_Arbre(Arbre_Huff);
            Afficher_Dict(Dictionnaire);
        end if;


        -- Enregistrer la Table et L'arbre de Huffman dans le texte du fichier compresser.
        Texte_Hff := Table_En_Binaire(Dictionnaire) & Arbre_En_Binaire(Arbre_Huff);
        Vider_Arbre(Arbre_Huff);

        -- Encoder tous les caracteres du texte et les enregistrer dans le fichier .hff

        for Caractere in Texte loop
            Texte_Hff := Texte_Hff & La_Donnee_Dict(Dictionnaire, Caractere, False);
        end loop;
        Texte_Hff := Texte_Hff & La_Donnee_Dict(Dictionnaire, 'a', True);

        Nom_Fichier_Hff := To_String(Nom_Fichier)(1..(Length(Nom_Fichier)-4)) & To_Unbounded_String(".hff");
        Ecrire_Compression(Nom_Fichier_Hff, Texte_Hff);
        Vider_Dict(Dictionnaire);


    end Comprimer_Fichier;






    Nom_Fichier	  : Unbounded_String;
    Bavard           : Boolean := False;
    Exception_Option_Error : exception;
    Exception_Name_Error : exception;

begin
    if Argument_Count > 2 or Argument_Count = 0 then
        Afficher_Usage;
    else
        if Argument_Count = 2 then
            if Argument(1) != "-b" or Argument(1) != "--bavard" then
                raise Exception_Option_Error;
            else
                Bavard := True;
                Nom_Fichier := To_Unbounded_String(Argument(2));
            end if;

        else
            Nom_Fichier := To_Unbounded_String(Argument(2));
        end if:

        if To_String(Nom_Fichier)((Length(Nom_Fichier)-4)..Length(Nom_Fichier)) != ".txt" then
            raise Exception_Name_Error;
        end if;

        Comprimer_Fichier(Nom_Fichier, Bavard);

    end if;
exception
    when Exception_Option_Error =>
        Put_Line ("L'option proposée n'est pas reconnue");
    when Exception_Name_Error =>
        Put_Line ("Le fichier n'est pas dans le format attendu");
end Compression;
